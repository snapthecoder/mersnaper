=============================================================================
List of generated methods in project: TEAM_Robot

This text description is generated by Processor Expert. Do not modify it.
=============================================================================

Module "CLS1"      (component Shell)
   - CLS1_PrintPrompt -Prints the prompt to the stdOut channel
   - CLS1_SendNum8u -Sends an 8bit unsigned number to the given I/O
   - CLS1_SendNum8s -Sends an 8bit signed number to the given I/O
   - CLS1_SendNum16u -Sends a 16bit unsigned number to the given I/O
   - CLS1_SendNum16s -Sends a 16bit signed number to the given I/O
   - CLS1_SendNum32u -Sends a 32bit unsigned number to the given I/O
   - CLS1_SendNum32s -Sends a 32bit signed number to the given I/O
   - CLS1_SendCh -Prints a character using an I/O function
   - CLS1_SendStr -Prints a string using an I/O function
   - CLS1_printfIO -Printf() style function using XFormat component, using a custom I/O handler.
   - CLS1_printf -Printf() style function using XFormat component, using the shell default I/O handler.
   - CLS1_SendData -Sends data using an I/O function. Unlike SendStr(), with this method it is possible to send binary data, 
                including zero bytes.
   - CLS1_PrintStatus -Prints various available system status information
   - CLS1_ParseCommand -Parses a shell command. Use 'help' to get a list of supported commands.
   - CLS1_IsHistoryCharacter -Returns TRUE if character is a history character
   - CLS1_ReadLine -Reads a line from stdIn and returns TRUE if we have a line, FALSE otherwise.
   - CLS1_PrintCommandFailed -Prints a standard message for failed or unknown commands
   - CLS1_IterateTable -Parses a shell command. It handles first the internal commands and will call the provided callback.
   - CLS1_SetStdio -Sets an StdIO structure which is returned by GetStdio()
   - CLS1_GetStdio -Returns the default stdio channel. This method is only available if a shell is enabled in the component 
                properties.
   - CLS1_RequestSerial -Used to get mutual access to the shell console. Only has an effect if using an RTOS with semaphore for 
                the console access.
   - CLS1_ReleaseSerial -Used to release mutual access to the shell console. Only has an effect if using an RTOS with semaphore 
                for the console access.
   - CLS1_ReadAndParseWithCommandTable -Reads characters from the default input channel and appends it to the buffer. Once a 
                new line has been detected, the line will be parsed using the handlers in the table.
   - CLS1_ParseWithCommandTable -Parses a shell command. It handles first the internal commands and will call the provided 
                callback.
   - CLS1_GetSemaphore -Return the semaphore of the shell.
   - CLS1_SendStatusStr -Prints a status string using an I/O function, formated for the 'status' command
   - CLS1_SendHelpStr -Prints a string using an I/O function, formated for the 'help' command
   - CLS1_ReadChar -Reads a character (blocking)
   - CLS1_SendChar -Sends a character (blocking)
   - CLS1_KeyPressed -Checks if a key has been pressed (a character is present in the input buffer)
   - CLS1_SendCharFct -Method to send a character using a standard I/O handle.
   - CLS1_Init -Initializes the module, especially creates the mutex semaphore if an RTOS is used.
   - CLS1_Deinit -De-Initializes the module, especially frees the mutex semaphore if an RTOS is used.

Module "MCUC1"     (component McuLibConfig)

Module "WAIT1"     (component Wait)
   - WAIT1_Wait10Cycles -Wait for 10 CPU cycles.
   - WAIT1_Wait100Cycles -Wait for 100 CPU cycles.
   - WAIT1_WaitCycles -Wait for a specified number of CPU cycles (16bit data type).
   - WAIT1_WaitLongCycles -Wait for a specified number of CPU cycles (32bit data type).
   - WAIT1_Waitms -Wait for a specified time in milliseconds.
   - WAIT1_Waitus -Wait for a specified time in microseconds.
   - WAIT1_Waitns -Wait for a specified time in nano seconds.
   - WAIT1_WaitOSms -If an RTOS is enabled, this routine will use a non-blocking wait method. Otherwise it will do a 
                busy/blocking wait.
   - WAIT1_Init -Driver initialization routine.
   - WAIT1_DeInit -Driver de-initialization routine

Module "CS1"       (component CriticalSection)
   - CS1_CriticalVariable -Defines a variable if necessary. This is a macro.
   - CS1_EnterCritical -Enters a critical section
   - CS1_ExitCritical -Exits a critical section

Module "HF1"       (component HardFault)
   - HF1_HardFaultHandler -Hard Fault Handler
   - HF1_Deinit -Deinitializes the driver
   - HF1_Init -Initializes the driver

Module "XF1"       (component XFormat)
   - XF1_xvformat -Printf() like format function
   - XF1_xformat -Printf() like function using variable arguments
   - XF1_xsprintf -sprintf() like function
   - XF1_xsnprintf -snprintf() like function, returns the number of characters written, negative in case of error.

Module "KIN1"      (component KinetisTools)
   - KIN1_SoftwareReset -Performs a reset of the device
   - KIN1_UIDGet -Return the 128bit UID of the device
   - KIN1_UIDSame -Compares two UID
   - KIN1_UIDtoString -Returns the value of the UID as string
   - KIN1_GetKinetisFamilyString -Determines the Kinetis Familiy based on SIM_SDID register
   - KIN1_GetPC -returns the program counter
   - KIN1_GetSP -returns the stack pointer
   - KIN1_SetPSP -sets the process stack pointer
   - KIN1_SetLR -Sets the link register
   - KIN1_InitCycleCounter -Initializes the cycle counter, available if the core has a DWT (Data Watchpoint and Trace) unit, 
                usually present on M3/M4/M7
   - KIN1_ResetCycleCounter -Reset the cycle counter (set it to zero)
   - KIN1_EnableCycleCounter -Enables counting the cycles.
   - KIN1_DisableCycleCounter -Disables the cycle counter.
   - KIN1_GetCycleCounter -Return the current cycle counter value
   - KIN1_ParseCommand -Shell Command Line parser. Method is only available if Shell is enabled in the component properties.

Module "UTIL1"     (component Utility)
   - UTIL1_strcpy -Same as normal strcpy, but safe as it does not write beyond the buffer.
   - UTIL1_strcat -Same as normal strcat, but safe as it does not write beyond the buffer.
   - UTIL1_strcatPad -Same as normal strcat, but safe as it does not write beyond the buffer. The buffer will be filled with a 
                pad character for a given length.
   - UTIL1_chcat -Adds a single character to a zero byte terminated string buffer. It cares about buffer overflow.
   - UTIL1_Num8sToStr -Converts a signed 8bit value into a string.
   - UTIL1_Num8uToStr -Converts an unsigned 8bit value into a string.
   - UTIL1_Num16sToStr -Converts a signed 16bit value into a string.
   - UTIL1_Num16uToStr -Converts a signed 16bit value into a string.
   - UTIL1_Num32uToStr -Converts an unsigned 32bit value into a string.
   - UTIL1_Num32sToStr -Converts a signed 32bit value into a string.
   - UTIL1_NumFloatToStr -Converts a float value into a string.
   - UTIL1_Num16sToStrFormatted -Converts a 16bit signed value to string.
   - UTIL1_Num16uToStrFormatted -Converts a 16bit unsigned value to string.
   - UTIL1_Num32uToStrFormatted -Converts a 32bit unsigned value to string.
   - UTIL1_Num32sToStrFormatted -Converts a 32bit signed value to string.
   - UTIL1_strcatNum8u -Appends a 8bit unsigned value to a string buffer.
   - UTIL1_strcatNum8s -Appends a 8bit signed value to a string buffer.
   - UTIL1_strcatNum16u -Appends a 16bit unsigned value to a string buffer.
   - UTIL1_strcatNum16s -Appends a 16bit signed value to a string buffer.
   - UTIL1_strcatNum32u -Appends a 32bit signed value to a string buffer.
   - UTIL1_strcatNum32s -Appends a 32bit signed value to a string buffer.
   - UTIL1_strcatNum16uFormatted -Appends a 16bit unsigned value to a string buffer in a formatted way.
   - UTIL1_strcatNum16sFormatted -Appends a 16bit signed value to a string buffer in a formatted way.
   - UTIL1_strcatNum32uFormatted -Appends a 32bit unsigned value to a string buffer in a formatted way.
   - UTIL1_strcatNum32sFormatted -Appends a 32bit signed value to a string buffer in a formatted way.
   - UTIL1_strcatNum8Hex -Appends a 8bit unsigned value to a string buffer as hex number (without a 0x prefix).
   - UTIL1_strcatNum16Hex -Appends a 16bit unsigned value to a string buffer as hex number (without a 0x prefix).
   - UTIL1_strcatNum24Hex -Appends a 32bit unsigned value to a string buffer as hex number (without a 0x prefix). Only 24bits 
                are used.
   - UTIL1_strcatNum32Hex -Appends a 16bit unsigned value to a string buffer as hex number (without a 0x prefix).
   - UTIL1_strcatNum32sDotValue100 -Appends a 32bit signed value to a string buffer. The value is in 1/100 units.  For example 
                for the value -13456 it will append the string "-134.56"
   - UTIL1_strcatNumFloat -Converts a float value into a string.
   - UTIL1_IsLeapYear -Returns true if a given year is a leap year
   - UTIL1_WeekDay -Returns the weekday for a given date >= 1.Jan.1900
   - UTIL1_ReadEscapedName -Scans an escaped name from a string. This is useful e.g. for double quoted file names.
   - UTIL1_xatoi -Custom atoi() (ascii to int) implementation by Elm Chan
   - UTIL1_ScanDate -Scans a date in the format "dd.mm.yyyy" or "dd-mm-yyyy". For yy it will expand it to 20yy.
   - UTIL1_ScanTime -Scans a time string in the format "hh:mm:ss,hh" with the part for the ",hh" is optional.
   - UTIL1_ScanDecimal8uNumber -Scans a decimal 8bit unsigned number
   - UTIL1_ScanDecimal8sNumber -Scans a decimal 8bit signed number
   - UTIL1_ScanDecimal16uNumber -Scans a decimal 16bit unsigned number
   - UTIL1_ScanDecimal16sNumber -Scans a decimal 16bit signed number
   - UTIL1_ScanDecimal32uNumber -Scans a decimal 32bit unsigned number
   - UTIL1_ScanDecimal32sNumber -Scans a decimal 32bit signed number
   - UTIL1_ScanDecimal32sDotNumber -Scans a decimal 32bit signed number with a following dot (fractional part), e.g. "-34587.
                0248", it will return the (signed) integral and fractional part with number of fractional zeros. The function 
                accepts as well numbers  like "17" (no fractional part" or "17.0"
   - UTIL1_ScanHex8uNumber -Scans a hexadecimal 8bit number, starting with 0x
   - UTIL1_ScanHex8uNumberNoPrefix -Scans a hexadecimal 8bit number, without 0x
   - UTIL1_ScanHex16uNumber -Scans a hexadecimal 16bit number, starting with 0x
   - UTIL1_ScanHex32uNumber -Scans a hexadecimal 32bit number, starting with 0x
   - UTIL1_ScanSeparatedNumbers -Scans multiple numbers separated by character, e.g. "123.68.5.3"
   - UTIL1_ScanDoubleQuotedString -Scans a string inside double quotes and returns it without the double quotes.
   - UTIL1_strcmp -Wrapper to the standard strcmp() routine
   - UTIL1_strncmp -Wrapper to the standard strncmp() routine
   - UTIL1_strFind -Searches a substring inside a string and returns the position.
   - UTIL1_strtailcmp -Compares the tail of a string and returns 0 if it matches, 1 otherwise
   - UTIL1_strlen -Wrapper to the standard strlen() function.
   - UTIL1_strCutTail -Removes a tailing substring from a string. The string passed will be modified (the tail is cut by 
                writing a zero byte to the string!)
   - UTIL1_GetValue16LE -Returns a 16bit Little Endian value from memory
   - UTIL1_GetValue24LE -Returns a 24bit Little Endian value from memory
   - UTIL1_GetValue32LE -Returns a 32bit Little Endian value from memory
   - UTIL1_SetValue16LE -Stores a 16bit value in memory as Little Endian
   - UTIL1_SetValue24LE -Stores a 24bit value in memory as Little Endian
   - UTIL1_SetValue32LE -Stores a 32bit value in memory as Little Endian
   - UTIL1_map -Maps a value from one range to another
   - UTIL1_map64 -Maps a value from one range to another, using 64bit math
   - UTIL1_constrain -Makes sure that a given input value is inside a given range.
   - UTIL1_random -Provides a random value. You have to call intialize the random number generator with randomSetSeed() first!
   - UTIL1_randomSetSeed -Sets a seed for the random number generator
   - UTIL1_Deinit -Driver De-Initialization
   - UTIL1_Init -Driver Initialization

Module "LEDPin1"   (component BitIO)
   - LEDPin1_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - LEDPin1_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory 
                or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - LEDPin1_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - LEDPin1_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if 
                the direction = _[output]_ or _[input/output]_.
   - LEDPin1_NegVal -Negates (inverts) the output value. It is equivalent to the [PutVal(!GetVal())]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.

Module "LEDPin2"   (component BitIO)
   - LEDPin2_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - LEDPin2_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory 
                or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - LEDPin2_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - LEDPin2_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if 
                the direction = _[output]_ or _[input/output]_.
   - LEDPin2_NegVal -Negates (inverts) the output value. It is equivalent to the [PutVal(!GetVal())]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.

Module "SW1"       (component BitIO)
   - SW1_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].

Module "BUZ1"      (component BitIO)
   - BUZ1_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - BUZ1_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory or 
                a register and this value will be written to the pin after switching to the output mode (using [SetDir(TRUE)]; 
                see <Safe mode> property for limitations). If the direction is [output], it writes the value to the pin. 
                (Method is available only if the direction = _[output]_ or _[input/output]_).
   - BUZ1_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.
   - BUZ1_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if the 
                direction = _[output]_ or _[input/output]_.
   - BUZ1_NegVal -Negates (inverts) the output value. It is equivalent to the [PutVal(!GetVal())]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.

Module "RTT1"      (component SeggerRTT)
   - RTT1_Read -Read from buffer
   - RTT1_Write -Write to buffer
   - RTT1_WriteString -Write to buffer
   - RTT1_printf -Stores a formatted string in SEGGER RTT control block. This data is sent to the host.
   - RTT1_GetKey -Returns a character/key
   - RTT1_WaitKey -Waits for a key and returns it.
   - RTT1_HasKey -Checks if at least one character for reading is available in the SEGGER RTT buffer
   - RTT1_SetTerminal -Sets the terminal to be used for output on channel 0.
   - RTT1_TerminalOut -Writes a string to the given terminal without changing the terminal for channel 0.
   - RTT1_ConfigUpBuffer -Configures the Up (device to host) buffer
   - RTT1_ConfigDownBuffer -Configures the Down (host to device) buffer
   - RTT1_RecvChar -Receives a character from channel 0. Returns ERR_RXEMPTY if no character available
   - RTT1_SendChar -Sends a character to channel 0.
   - RTT1_GetCharsInRxBuf -Returns the number of characters in the receive buffer.
   - RTT1_StdIOKeyPressed -StdIO handler for Shell
   - RTT1_StdIOReadChar -StdIO Handler for reading a character. It returns a zero byte if there is no character in input buffer.
   - RTT1_StdIOSendChar -StdIO handler to sends a character.
   - RTT1_GetStdio -Returns a pointer to the standard I/O
   - RTT1_Deinit -Driver deinitialization
   - RTT1_Init -Initializes the RTT Control Block.

Module "LED_IR"    (component LED)
   - LED_IR_On -This turns the LED on.
   - LED_IR_Off -This turns the LED off.
   - LED_IR_Neg -This negates/toggles the LED
   - LED_IR_Get -This returns logical 1 in case the LED is on, 0 otherwise.
   - LED_IR_Put -Turns the LED on or off.
   - LED_IR_SetRatio16 -Method to specify the duty cycle. If using a PWM pin, this means the duty cycle is set. For On/off pins,
                values smaller 0x7FFF means off, while values greater means on.
   - LED_IR_ParseCommand -Shell Command Line parser. This method is enabled/disabled depending on if you have the Shell 
                enabled/disabled in the properties.
   - LED_IR_Deinit -Deinitializes the driver
   - LED_IR_Init -Performs the LED driver initialization.

Module "RefCnt"    (component TimerUnit_LDD)
   - RefCnt_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.
   - RefCnt_Deinit -Deinitializes the device. Switches off the device, frees the device data structure memory, interrupts 
                vectors, etc.
   - RefCnt_ResetCounter -Resets counter. If counter is counting up then it is set to zero. If counter is counting down then 
                counter is updated to the reload value.   The method is not available if HW doesn't allow resetting of the 
                counter.
   - RefCnt_GetCounterValue -Returns the content of counter register. This method can be used both if counter is enabled and if 
                counter is disabled. The method is not available if HW doesn't allow reading of the counter.

Module "IR1"       (component BitIO)
   - IR1_SetDir -Sets a pin direction (available only if the direction = _[input/output]_).
   - IR1_SetInput -Sets a pin direction to input (available only if the direction = _[input/output]_).
   - IR1_SetOutput -Sets a pin direction to output (available only if the direction = _[input/output]_).
   - IR1_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - IR1_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory or a 
                register and this value will be written to the pin after switching to the output mode (using [SetDir(TRUE)]; 
                see <Safe mode> property for limitations). If the direction is [output], it writes the value to the pin. 
                (Method is available only if the direction = _[output]_ or _[input/output]_).
   - IR1_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.
   - IR1_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if the 
                direction = _[output]_ or _[input/output]_.

Module "IR2"       (component BitIO)
   - IR2_SetDir -Sets a pin direction (available only if the direction = _[input/output]_).
   - IR2_SetInput -Sets a pin direction to input (available only if the direction = _[input/output]_).
   - IR2_SetOutput -Sets a pin direction to output (available only if the direction = _[input/output]_).
   - IR2_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - IR2_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory or a 
                register and this value will be written to the pin after switching to the output mode (using [SetDir(TRUE)]; 
                see <Safe mode> property for limitations). If the direction is [output], it writes the value to the pin. 
                (Method is available only if the direction = _[output]_ or _[input/output]_).
   - IR2_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.
   - IR2_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if the 
                direction = _[output]_ or _[input/output]_.

Module "IR3"       (component BitIO)
   - IR3_SetDir -Sets a pin direction (available only if the direction = _[input/output]_).
   - IR3_SetInput -Sets a pin direction to input (available only if the direction = _[input/output]_).
   - IR3_SetOutput -Sets a pin direction to output (available only if the direction = _[input/output]_).
   - IR3_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - IR3_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory or a 
                register and this value will be written to the pin after switching to the output mode (using [SetDir(TRUE)]; 
                see <Safe mode> property for limitations). If the direction is [output], it writes the value to the pin. 
                (Method is available only if the direction = _[output]_ or _[input/output]_).
   - IR3_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.
   - IR3_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if the 
                direction = _[output]_ or _[input/output]_.

Module "IR4"       (component BitIO)
   - IR4_SetDir -Sets a pin direction (available only if the direction = _[input/output]_).
   - IR4_SetInput -Sets a pin direction to input (available only if the direction = _[input/output]_).
   - IR4_SetOutput -Sets a pin direction to output (available only if the direction = _[input/output]_).
   - IR4_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - IR4_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory or a 
                register and this value will be written to the pin after switching to the output mode (using [SetDir(TRUE)]; 
                see <Safe mode> property for limitations). If the direction is [output], it writes the value to the pin. 
                (Method is available only if the direction = _[output]_ or _[input/output]_).
   - IR4_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.
   - IR4_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if the 
                direction = _[output]_ or _[input/output]_.

Module "IR5"       (component BitIO)
   - IR5_SetDir -Sets a pin direction (available only if the direction = _[input/output]_).
   - IR5_SetInput -Sets a pin direction to input (available only if the direction = _[input/output]_).
   - IR5_SetOutput -Sets a pin direction to output (available only if the direction = _[input/output]_).
   - IR5_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - IR5_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory or a 
                register and this value will be written to the pin after switching to the output mode (using [SetDir(TRUE)]; 
                see <Safe mode> property for limitations). If the direction is [output], it writes the value to the pin. 
                (Method is available only if the direction = _[output]_ or _[input/output]_).
   - IR5_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.
   - IR5_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if the 
                direction = _[output]_ or _[input/output]_.

Module "IR6"       (component BitIO)
   - IR6_SetDir -Sets a pin direction (available only if the direction = _[input/output]_).
   - IR6_SetInput -Sets a pin direction to input (available only if the direction = _[input/output]_).
   - IR6_SetOutput -Sets a pin direction to output (available only if the direction = _[input/output]_).
   - IR6_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - IR6_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory or a 
                register and this value will be written to the pin after switching to the output mode (using [SetDir(TRUE)]; 
                see <Safe mode> property for limitations). If the direction is [output], it writes the value to the pin. 
                (Method is available only if the direction = _[output]_ or _[input/output]_).
   - IR6_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.
   - IR6_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if the 
                direction = _[output]_ or _[input/output]_.

Module "Q4CLeft"   (component QuadCounter)
   - Q4CLeft_GetPos -Returns the current position based on the encoder tracking.
   - Q4CLeft_SetPos -Sets the position information. Can be used as well to reset the position information.
   - Q4CLeft_GetVal -Returns the quadrature value (0, 1, 2 or 3)
   - Q4CLeft_Sample -Call this method to periodically sample the signals.
   - Q4CLeft_NofErrors -Returns the number of decoding errors
   - Q4CLeft_SwapPins -Swap the two pins
   - Q4CLeft_Deinit -Module de-initialization method
   - Q4CLeft_Init -Module initialization method
   - Q4CLeft_ParseCommand -Handler to process shell commands

Module "Q4CRight"  (component QuadCounter)
   - Q4CRight_GetPos -Returns the current position based on the encoder tracking.
   - Q4CRight_SetPos -Sets the position information. Can be used as well to reset the position information.
   - Q4CRight_GetVal -Returns the quadrature value (0, 1, 2 or 3)
   - Q4CRight_Sample -Call this method to periodically sample the signals.
   - Q4CRight_NofErrors -Returns the number of decoding errors
   - Q4CRight_SwapPins -Swap the two pins
   - Q4CRight_Deinit -Module de-initialization method
   - Q4CRight_Init -Module initialization method
   - Q4CRight_ParseCommand -Handler to process shell commands

Module "MOTTU"     (component TimerUnit_LDD)
   - MOTTU_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.
   - MOTTU_Deinit -Deinitializes the device. Switches off the device, frees the device data structure memory, interrupts 
                vectors, etc.
   - MOTTU_Enable -Enables the component - it starts the signal generation. Events may be generated (see SetEventMask). The 
                method is not available if the counter can't be disabled/enabled by HW.
   - MOTTU_Disable -Disables the component - it stops signal generation and events calling. The method is not available if the 
                counter can't be disabled/enabled by HW.
   - MOTTU_GetPeriodTicks -Returns the number of counter ticks before re-initialization. See also method <SetPeriodTicks>. This 
                method is available only if the property <"Counter restart"> is switched to 'on-match' value.
   - MOTTU_ResetCounter -Resets counter. If counter is counting up then it is set to zero. If counter is counting down then 
                counter is updated to the reload value.   The method is not available if HW doesn't allow resetting of the 
                counter.
   - MOTTU_GetCounterValue -Returns the content of counter register. This method can be used both if counter is enabled and if 
                counter is disabled. The method is not available if HW doesn't allow reading of the counter.
   - MOTTU_SetOffsetTicks -Sets the new offset value to channel specified by the parameter ChannelIdx. It is user 
                responsibility to use value below selected period. This method is available when at least one channel is 
                configured.
   - MOTTU_GetOffsetTicks -Returns the number of counter ticks to compare match channel specified by the parameter ChannelIdx. 
                See also method <SetOffsetTicks>. This method is available when at least one channel is configured.
   - MOTTU_SelectOutputAction -Sets the type of compare match and counter overflow action on channel output. This method is 
                available when at least one channel is configured.

Module "DIRL"      (component BitIO)
   - DIRL_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - DIRL_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory or 
                a register and this value will be written to the pin after switching to the output mode (using [SetDir(TRUE)]; 
                see <Safe mode> property for limitations). If the direction is [output], it writes the value to the pin. 
                (Method is available only if the direction = _[output]_ or _[input/output]_).
   - DIRL_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.
   - DIRL_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if the 
                direction = _[output]_ or _[input/output]_.

Module "PWMR"      (component PWM)
   - PWMR_Enable -This method enables the component - it starts the signal generation. Events may be generated 
                (<DisableEvent>/<EnableEvent>).
   - PWMR_Disable -This method disables the component - it stops the signal generation and events calling. When the timer is 
                disabled, it is possible to call <ClrValue> and <SetValue> methods.
   - PWMR_SetRatio16 -This method sets a new duty-cycle ratio. Ratio is expressed as a 16-bit unsigned integer number. 0 - FFFF 
                value is proportional to ratio 0 - 100%. The method is available only if it is not selected list of predefined 
                values in <Starting pulse width> property.   Note: Calculated duty depends on the timer possibilities and on 
                the selected period.

Module "DIRR"      (component BitIO)
   - DIRR_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - DIRR_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory or 
                a register and this value will be written to the pin after switching to the output mode (using [SetDir(TRUE)]; 
                see <Safe mode> property for limitations). If the direction is [output], it writes the value to the pin. 
                (Method is available only if the direction = _[output]_ or _[input/output]_).
   - DIRR_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.
   - DIRR_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if the 
                direction = _[output]_ or _[input/output]_.

Module "PWML"      (component PWM)
   - PWML_Enable -This method enables the component - it starts the signal generation. Events may be generated 
                (<DisableEvent>/<EnableEvent>).
   - PWML_Disable -This method disables the component - it stops the signal generation and events calling. When the timer is 
                disabled, it is possible to call <ClrValue> and <SetValue> methods.
   - PWML_SetRatio16 -This method sets a new duty-cycle ratio. Ratio is expressed as a 16-bit unsigned integer number. 0 - FFFF 
                value is proportional to ratio 0 - 100%. The method is available only if it is not selected list of predefined 
                values in <Starting pulse width> property.   Note: Calculated duty depends on the timer possibilities and on 
                the selected period.

Module "QuadInt"   (component TimerInt)

Module "TU_QuadInt" (component TimerUnit_LDD)
   - TU_QuadInt_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and 
                sets interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.

Module "TMOUT1"    (component Timeout)
   - TMOUT1_GetCounter -Initializes a new timeout counter and returns the handle to it. At the end, use LeaveCounter() to free 
                up the resource.
   - TMOUT1_LeaveCounter -To be called to return the counter. Note that a counter always should be returned so it can be reused.
   - TMOUT1_Value -Return the current value of the counter (in ticks)
   - TMOUT1_SetCounter -Sets the counter to a new value and returns the value just prior to the call.
   - TMOUT1_CounterExpired -Returns true if the timeout counter has been expired
   - TMOUT1_AddTick -Method to be called from a periodic timer or interrupt. It will decrement all current counters by one down 
                to zero.
   - TMOUT1_Init -Initialization of the driver

Module "USB1"      (component FSL_USB_Stack)
   - USB1_Deinit -Deinitializes the driver
   - USB1_Init -Initializes the driver

Module "IFsh1"     (component IntFLASH)
   - IFsh1_DisableEvent -This method disables all the events except <OnSaveBuffer>, <OnRestoreBuffer> and <OnEraseError>. The 
                method is available only if any event is enabled.
   - IFsh1_EnableEvent -This method enables all the events except <OnSaveBuffer>, <OnRestoreBuffer> and <OnEraseError>. The 
                method is available only if any event is enabled.
   - IFsh1_SetByteFlash -Writes a byte to an address in FLASH. The operation of this method depends on the "Write method" 
                property and state of the flash. Please see more details on general info page of the help.
   - IFsh1_SetWordFlash -Writes a word to an address in FLASH. The operation of this method depends on the "Write method" 
                property and state of the flash. Please see more details on general info page of the help.
   - IFsh1_SetBlockFlash -Writes data to FLASH. The operation of this method depends on the "Write method" property and state 
                of the flash. Please see more details on general info page of the help.
   - IFsh1_GetBlockFlash -Reads data from FLASH.

Module "USB0"      (component Init_USB_OTG_VAR0)
   - USB0_Init -This method initializes registers of the USB_OTG module according to the Peripheral Initialization settings. 
                Call this method in user code to initialize the module. By default, the method is called by PE automatically; 
                see "Call Init method" property of the component for more details.

Module "ADC_Bat"   (component ADC_LDD)
   - ADC_Bat_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc.   If the "Enable in init. code" is set to "yes" value 
                then the device is also enabled(see the description of the Enable() method). In this case the Enable() method 
                is not necessary and needn't to be generated.    This method can be called only once. Before the second call of 
                Init() the Deinit() must be called first.
   - ADC_Bat_StartSingleMeasurement -This method starts one measurement of the selected group of samples and exits immediately. 
                This is ADC SW trigger method. The group of samples for measurement is specified by preceding call to 
                <SelectSampleGroup()> or <CreateSampleGroup> method.     DMA disabled: The <OnMeasurementComplete() > event is 
                invoked after the measurement is done and if the event is enabled. Results of the measurement can be read by 
                the <GetMeasuredValues()> method.     DMA enabled: DMA request from configured ADC is enabled automatically. 
                The <OnMeasurementComplete() > event is invoked after the requested number of results are transferred to 
                destination buffer by DMA and if the event is enabled. <GetMeasuredValues()> method is not available if DMA 
                mode is enabled. If the DMA transfer was completed before and DMA is not recofingured, DMA error can occur. See 
                also <SetBuffer()> method.     The state of the measurement can be also polled by the 
                <GetMeasurementCompleteStatus()> method. The <Discontinuous mode> doesn't support this method.
   - ADC_Bat_GetMeasuredValues -This method copies results of the last measurement to the user supplied buffer. Data size 
                depends on the size of measured sample group (see <SelectSampleGroup()> or <CreateSampleGroup()> method). Data 
                representation is defined by the <Result type> property. Typically this method is called from 
                <OnMeasurementComplete> event to get results of the last measurement. This method is not available if DMA is 
                enabled.
   - ADC_Bat_CreateSampleGroup -This method prepares HW for next measurement according to array of samples defined during 
                run-time. The array of samples should be prepared prior to calling this method. Pointer to the array is passed 
                into this method in parameter SampleGroupPtr. The number of samples is defined by parameter SampleCount. Once 
                any group is prepared, the measurement can be started multiple times. Note: This method works only with the 
                sample groups defined during run-time. For design-time defined groups use <SelectSampleGroup()> method.
   - ADC_Bat_GetMeasurementCompleteStatus -Returns whether the measurement is done and the results can be read by the user. It 
                can be used to poll the state of measurement if <Interrupt service/event> is disabled or if 
                <OnMeasurementComplete> event is disabled by the <SetEventMask()> methods.

Module "TmDt1"     (component GenericTimeDate)
   - TmDt1_AddTick -Increments the tick counter of the software RTC. Needs to be called periodically by the application to 
                increase the time tick count.
   - TmDt1_AddTicks -Same as AddTick(), but multiple ticks can be added in one step.
   - TmDt1_CalculateDayOfWeek -Returns the day of the week, Sunday starting as zero. Monday is 1, ...
   - TmDt1_SetTime -This method sets a new actual time of the software RTC.
   - TmDt1_GetTime -This method returns current time from the software RTC.
   - TmDt1_SetDate -This method sets a new actual date of the software RTC.
   - TmDt1_GetDate -This method returns current date from the software RTC.
   - TmDt1_SetTimeDate -This method sets a new actual time and date of the RTC.
   - TmDt1_GetTimeDate -This method returns current time and date from the RTC.
   - TmDt1_SetSWTimeDate -This method sets a new actual time and date of the software RTC.
   - TmDt1_GetSWTimeDate -This method returns current time and date from the software RTC.
   - TmDt1_SetInternalRTCTimeDate -This method sets a new actual time and date of the internal hardware RTC.
   - TmDt1_GetInternalRTCTimeDate -This method returns current time and date from the hardware RTC.
   - TmDt1_SyncWithInternalRTC -Synchronizes the software RTC with date and time from the internal hardware RTC
   - TmDt1_SyncSWtimeToInternalRTCsec -This method synchronizes the software RTC with the internal HW RTC. Because the internal 
                RTC only counts seconds, we sync on a second change.
   - TmDt1_SetExternalRTCTimeDate -This method sets a new actual time and date of the external hardware RTC.
   - TmDt1_GetExternalRTCTimeDate -This method returns current time and date from the external hardware RTC.
   - TmDt1_SyncWithExternalRTC -Synchronizes the software RTC with date and time from the hardware RTC. Note that if that RTC 
                interface requires interrupts, this function should be called only when interrupts are enabled.
   - TmDt1_UnixSecondsToTimeDateCustom -Transforms a given time/date into the Unix time stamp, with the number of seconds from 
                a starting date
   - TmDt1_UnixSecondsToTimeDate -Transforms a given time/date into the Unix time stamp, with the number of seconds after 
                1-Jan-1970
   - TmDt1_TimeDateToUnixSecondsCustom -Returns for a given time/date the corresponding UNIX time stamp with a custom base date.
   - TmDt1_TimeDateToUnixSeconds -Returns for a given time/date the corresponding UNIX time stamp, starting at 1-Jan-1970.
   - TmDt1_AddDateString -Adds a formatted date string to a buffer
   - TmDt1_AddTimeString -Adds a formatted time string to a buffer
   - TmDt1_ParseCommand -Shell Command Line parser
   - TmDt1_DeInit -Deinitializes the driver.
   - TmDt1_Init -Initialization method

Module "Cpu"       (component MK22FN1M0LK12)
   - Cpu_EnableInt -Enables all maskable interrupts.
   - Cpu_DisableInt -Disables all maskable interrupts.

===================================================================================
