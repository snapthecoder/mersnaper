/* ###################################################################
**     This component module is generated by Processor Expert. Do not modify it.
**     Filename    : LED_IR.h
**     Project     : TEAM_Robot
**     Processor   : MK22FX512VLK12
**     Component   : LED
**     Version     : Component 01.074, Driver 01.00, CPU db: 3.00.000
**     Repository  : My Components
**     Compiler    : GNU C Compiler
**     Date/Time   : 2017-10-05, 14:03, # CodeGen: 0
**     Abstract    :
**          This component implements a universal driver for a single LED.
**     Settings    :
**          Component name                                 : LED_IR
**          SDK                                            : MCUC1
**          Turned On with initialization                  : no
**          HW Interface                                   : 
**            Anode on port side, HIGH is ON               : yes
**            On/Off                                       : Enabled
**              Pin                                        : LEDpin
**            PWM                                          : Disabled
**          Shell                                          : Enabled
**            Shell                                        : CLS1
**            Utility                                      : UTIL1
**     Contents    :
**         On           - void LED_IR_On(void);
**         Off          - void LED_IR_Off(void);
**         Neg          - void LED_IR_Neg(void);
**         Get          - uint8_t LED_IR_Get(void);
**         Put          - void LED_IR_Put(uint8_t val);
**         SetRatio16   - void LED_IR_SetRatio16(uint16_t ratio);
**         ParseCommand - uint8_t LED_IR_ParseCommand(const unsigned char *cmd, bool *handled, const...
**         Deinit       - void LED_IR_Deinit(void);
**         Init         - void LED_IR_Init(void);
**
**     * Copyright (c) 2013-2017, Erich Styger
**      * Web:         https://mcuoneclipse.com
**      * SourceForge: https://sourceforge.net/projects/mcuoneclipse
**      * Git:         https://github.com/ErichStyger/McuOnEclipse_PEx
**      * All rights reserved.
**      *
**      * Redistribution and use in source and binary forms, with or without modification,
**      * are permitted provided that the following conditions are met:
**      *
**      * - Redistributions of source code must retain the above copyright notice, this list
**      *   of conditions and the following disclaimer.
**      *
**      * - Redistributions in binary form must reproduce the above copyright notice, this
**      *   list of conditions and the following disclaimer in the documentation and/or
**      *   other materials provided with the distribution.
**      *
**      * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
**      * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
**      * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
**      * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
**      * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
**      * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
**      * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
**      * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
**      * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
**      * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
** ###################################################################*/
/*!
** @file LED_IR.h
** @version 01.00
** @brief
**          This component implements a universal driver for a single LED.
*/         
/*!
**  @addtogroup LED_IR_module LED_IR module documentation
**  @{
*/         

#ifndef __LED_IR_H
#define __LED_IR_H

/* MODULE LED_IR. */
#include "MCUC1.h" /* SDK and API used */
#include "LED_IRconfig.h" /* configuration */

/* Include inherited components */
#include "MCUC1.h"
#include "LEDpin3.h"
#include "CLS1.h"
#include "UTIL1.h"

#define LED_IR_ClrVal()    LEDpin3_ClrVal() /* put the pin on low level */
#define LED_IR_SetVal()    LEDpin3_SetVal() /* put the pin on high level */
#define LED_IR_SetInput()  LEDpin3_SetInput() /* use the pin as input pin */
#define LED_IR_SetOutput() LEDpin3_SetOutput() /* use the pin as output pin */

#define LED_IR_PARSE_COMMAND_ENABLED  1 /* set to 1 if method ParseCommand() is present, 0 otherwise */


#define LED_IR_On() LEDpin3_SetVal()
/*
** ===================================================================
**     Method      :  LED_IR_On (component LED)
**     Description :
**         This turns the LED on.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

#define LED_IR_Off() LEDpin3_ClrVal()
/*
** ===================================================================
**     Method      :  LED_IR_Off (component LED)
**     Description :
**         This turns the LED off.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

#define LED_IR_Neg() LEDpin3_NegVal()
/*
** ===================================================================
**     Method      :  LED_IR_Neg (component LED)
**     Description :
**         This negates/toggles the LED
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

#define LED_IR_Get() LEDpin3_GetVal()
/*
** ===================================================================
**     Method      :  LED_IR_Get (component LED)
**     Description :
**         This returns logical 1 in case the LED is on, 0 otherwise.
**     Parameters  : None
**     Returns     :
**         ---             - Status of the LED (on or off)
** ===================================================================
*/

void LED_IR_Init(void);
/*
** ===================================================================
**     Method      :  LED_IR_Init (component LED)
**     Description :
**         Performs the LED driver initialization.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

#define LED_IR_Put(val)  ((val) ? LED_IR_On() : LED_IR_Off())
/*
** ===================================================================
**     Method      :  LED_IR_Put (component LED)
**     Description :
**         Turns the LED on or off.
**     Parameters  :
**         NAME            - DESCRIPTION
**         val             - value to define if the LED has to be on or
**                           off.
**     Returns     : Nothing
** ===================================================================
*/

void LED_IR_Deinit(void);
/*
** ===================================================================
**     Method      :  LED_IR_Deinit (component LED)
**     Description :
**         Deinitializes the driver
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

uint8_t LED_IR_ParseCommand(const unsigned char *cmd, bool *handled, const CLS1_StdIOType *io);
/*
** ===================================================================
**     Method      :  LED_IR_ParseCommand (component LED)
**     Description :
**         Shell Command Line parser. This method is enabled/disabled
**         depending on if you have the Shell enabled/disabled in the
**         properties.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * cmd             - Pointer to command string
**       * handled         - Pointer to variable which tells if
**                           the command has been handled or not
**       * io              - Pointer to I/O structure
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

void LED_IR_SetRatio16(uint16_t ratio);
/*
** ===================================================================
**     Method      :  LED_IR_SetRatio16 (component LED)
**     Description :
**         Method to specify the duty cycle. If using a PWM pin, this
**         means the duty cycle is set. For On/off pins, values smaller
**         0x7FFF means off, while values greater means on.
**     Parameters  :
**         NAME            - DESCRIPTION
**         ratio           - Ratio value, where 0 means 'off' and
**                           0xffff means 'on'
**     Returns     : Nothing
** ===================================================================
*/

/* END LED_IR. */

#endif
/* ifndef __LED_IR_H */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.5 [05.21]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
